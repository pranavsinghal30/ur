{"ast":null,"code":"import _classCallCheck from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/src/ReactSimpleMap/ReactSimpleMap.react.js\";\nimport * as React from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport data from \"./data/world-50m.json\";\nimport { scaleLinear } from \"d3-scale\";\n\nfunction value(p, k) {\n  if (k == \"end_date\") {\n    return parseInt((p[k] - p[\"start_date\"]) / (1000 * 60 * 60 * 24));\n  } else if (k == \"start_date\") {\n    return p[k].getDate() + \"/\" + p[k].getMonth();\n  } else if (k == \"Total_Saved\") {\n    return parseInt((p[\"end_date\"] - p[\"start_date\"]) / (1000 * 60 * 60 * 24)) * p[\"daily\"];\n  } else {\n    return p[k].toString();\n  }\n}\n\nvar max = 0;\nvar min = Number.MAX_VALUE;\nvar mydata = [{\n  name: \"China\",\n  daily: 5731456,\n  start_date: new Date(2020, 1, 14),\n  end_date: new Date(2020, 2, 20),\n  Total_Saved: 0\n}, {\n  name: \"India\",\n  daily: 1823594,\n  start_date: new Date(2020, 2, 22),\n  end_date: new Date(),\n  Total_Saved: 0\n}, {\n  name: \"United States\",\n  daily: 12898866,\n  start_date: new Date(2020, 2, 28),\n  end_date: new Date(),\n  Total_Saved: 0\n}, {\n  name: \"Japan\",\n  daily: 984716,\n  start_date: new Date(2020, 1, 14),\n  end_date: new Date(),\n  Total_Saved: 0\n}, {\n  name: \"Italy\",\n  daily: 309127,\n  start_date: new Date(2020, 2, 9),\n  end_date: new Date(),\n  Total_Saved: 0\n}, {\n  name: \"Spain\",\n  daily: 239046,\n  start_date: new Date(2020, 2, 14),\n  end_date: new Date(),\n  Total_Saved: 0\n}, {\n  name: \"France\",\n  daily: 333728,\n  start_date: new Date(2020, 2, 17),\n  end_date: new Date(),\n  Total_Saved: 0\n}, {\n  name: \"Germany\",\n  daily: 428368,\n  start_date: new Date(2020, 2, 22),\n  end_date: new Date(),\n  Total_Saved: 0\n}, {\n  name: \"United Kingdom\",\n  daily: 340751,\n  start_date: new Date(2020, 2, 23),\n  end_date: new Date(),\n  Total_Saved: 0\n}, {\n  name: \"Belgium\",\n  daily: 829571,\n  start_date: new Date(2020, 1, 14),\n  end_date: new Date(),\n  Total_Saved: 0\n}];\nvar wrapperStyles = {\n  width: \"100%\",\n  height: \"auto\",\n  maxWidth: \"100%\",\n  margin: \"0 auto\",\n  fontFamily: \"Roboto, sans-serif\"\n};\n\nfunction calc(p) {\n  return parseInt((p[\"end_date\"] - p[\"start_date\"]) / (1000 * 60 * 60 * 24)) * p[\"daily\"];\n} //const values = []\n\n\nfunction change() {\n  mydata.map(function (s) {\n    return s.Total_Saved = calc(s);\n  });\n}\n\nfunction range() {\n  mydata.forEach(function (o) {\n    min = Math.min(min, calc(o) == 0 ? Number.MAX_VALUE : calc(o));\n    max = Math.max(max, calc(o));\n  });\n  console.log(\"max\" + max);\n  console.log(\"min\" + min);\n}\n\nvar ReactSimpleMap =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ReactSimpleMap, _React$PureComponent);\n\n  function ReactSimpleMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReactSimpleMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReactSimpleMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      origin: {\n        x: 0,\n        y: 0\n      },\n      content: \"\"\n    };\n\n    _this.handleMove = function (geography, evt) {\n      var x = evt.clientX;\n      var y = evt.clientY + window.pageYOffset;\n      console.log(geography.properties.ISO_A3);\n\n      _this.setState({\n        origin: {\n          x: x,\n          y: y\n        },\n        content: geography.properties.name + \": \" + (mydata.find(function (s) {\n          return s.name == geography.properties.name;\n        }) ? calc(mydata.find(function (s) {\n          return s.name == geography.properties.name;\n        })) + \" MT\" : \"NA\")\n      });\n    };\n\n    _this.handleLeave = function () {\n      _this.setState({\n        content: \"\"\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ReactSimpleMap, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      change();\n      range();\n      var popScale = scaleLinear().domain([min, (max + min) / 5, max]).range([\"#A4DE02\", \"#76BA1B\", \"#1E5631\"]);\n      return React.createElement(\"div\", {\n        style: wrapperStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.state.content && React.createElement(\"div\", {\n        style: {\n          position: \"fixed\",\n          top: this.state.origin.y + 20 - window.scrollY,\n          left: this.state.origin.x,\n          zIndex: 999999,\n          textAlign: \"center\",\n          border: \"1px grey solid\",\n          borderRadius: 3,\n          padding: 4,\n          backgroundColor: \"#fff\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, this.state.content), React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 205,\n          rotation: [-11, 0, 0]\n        },\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        width: 900,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(ZoomableGroup, {\n        center: [0, 20],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geography: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          var country = mydata.find(function (s) {\n            return s.name == geography.properties.name;\n          });\n          return React.createElement(Geography, {\n            key: geography.properties.ISO_A3 + i,\n            geography: geography,\n            onMouseMove: _this2.handleMove,\n            onMouseLeave: _this2.handleLeave,\n            projection: projection,\n            style: {\n              default: {\n                fill: country ? popScale(calc(country)) : \"#e8f4f8\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: country ? popScale(calc(country) + 100) : \"#e8f4f8\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#263238\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          });\n        });\n      }))));\n    }\n  }]);\n\n  return ReactSimpleMap;\n}(React.PureComponent);\n\nexport default ReactSimpleMap;","map":{"version":3,"sources":["/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/src/ReactSimpleMap/ReactSimpleMap.react.js"],"names":["React","ComposableMap","ZoomableGroup","Geographies","Geography","data","scaleLinear","value","p","k","parseInt","getDate","getMonth","toString","max","min","Number","MAX_VALUE","mydata","name","daily","start_date","Date","end_date","Total_Saved","wrapperStyles","width","height","maxWidth","margin","fontFamily","calc","change","map","s","range","forEach","o","Math","console","log","ReactSimpleMap","state","origin","x","y","content","handleMove","geography","evt","clientX","clientY","window","pageYOffset","properties","ISO_A3","setState","find","handleLeave","popScale","domain","position","top","scrollY","left","zIndex","textAlign","border","borderRadius","padding","backgroundColor","scale","rotation","geographies","projection","i","country","default","fill","stroke","strokeWidth","outline","hover","pressed","PureComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport data from \"./data/world-50m.json\";\nimport { scaleLinear } from \"d3-scale\";\n\nfunction value(p, k) {\n  if (k == \"end_date\") {\n    return parseInt((p[k] - p[\"start_date\"]) / (1000 * 60 * 60 * 24));\n  } else if (k == \"start_date\") {\n    return p[k].getDate() + \"/\" + p[k].getMonth();\n  } else if (k == \"Total_Saved\") {\n    return (\n      parseInt((p[\"end_date\"] - p[\"start_date\"]) / (1000 * 60 * 60 * 24)) *\n      p[\"daily\"]\n    );\n  } else {\n    return p[k].toString();\n  }\n}\nvar max = 0;\nvar min = Number.MAX_VALUE;\nconst mydata = [\n  {\n    name: \"China\",\n    daily: 5731456,\n    start_date: new Date(2020, 1, 14),\n    end_date: new Date(2020, 2, 20),\n    Total_Saved: 0,\n  },\n  {\n    name: \"India\",\n    daily: 1823594,\n    start_date: new Date(2020, 2, 22),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n  {\n    name: \"United States\",\n    daily: 12898866,\n    start_date: new Date(2020, 2, 28),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n  {\n    name: \"Japan\",\n    daily: 984716,\n    start_date: new Date(2020, 1, 14),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n  {\n    name: \"Italy\",\n    daily: 309127,\n    start_date: new Date(2020, 2, 9),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n  {\n    name: \"Spain\",\n    daily: 239046,\n    start_date: new Date(2020, 2, 14),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n  {\n    name: \"France\",\n    daily: 333728,\n    start_date: new Date(2020, 2, 17),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n  {\n    name: \"Germany\",\n    daily: 428368,\n    start_date: new Date(2020, 2, 22),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n  {\n    name: \"United Kingdom\",\n    daily: 340751,\n    start_date: new Date(2020, 2, 23),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n  {\n    name: \"Belgium\",\n    daily: 829571,\n    start_date: new Date(2020, 1, 14),\n    end_date: new Date(),\n    Total_Saved: 0,\n  },\n];\nconst wrapperStyles = {\n  width: \"100%\",\n  height: \"auto\",\n  maxWidth: \"100%\",\n  margin: \"0 auto\",\n  fontFamily: \"Roboto, sans-serif\",\n};\n\ntype State = {\n  origin: { x: number, y: number },\n  content: string,\n};\n\nfunction calc(p) {\n  return (\n    parseInt((p[\"end_date\"] - p[\"start_date\"]) / (1000 * 60 * 60 * 24)) *\n    p[\"daily\"]\n  );\n}\n//const values = []\nfunction change() {\n  mydata.map(s => (s.Total_Saved = calc(s)));\n}\n\nfunction range() {\n  mydata.forEach(function(o) {\n    min = Math.min(min, calc(o) == 0 ? Number.MAX_VALUE : calc(o));\n    max = Math.max(max, calc(o));\n  });\n  console.log(\"max\" + max);\n  console.log(\"min\" + min);\n}\nclass ReactSimpleMap extends React.PureComponent<void, State> {\n  state = {\n    origin: { x: 0, y: 0 },\n    content: \"\",\n  };\n\n  handleMove = (\n    geography: { properties: { name: string, pop_est: string } },\n    evt: SyntheticMouseEvent<>\n  ): void => {\n    const x = evt.clientX;\n    const y = evt.clientY + window.pageYOffset;\n    console.log(geography.properties.ISO_A3);\n    this.setState({\n      origin: { x, y },\n      content:\n        geography.properties.name +\n        \": \" +\n        (mydata.find(s => s.name == geography.properties.name)\n          ? calc(mydata.find(s => s.name == geography.properties.name))+\" MT\"\n          : \"NA\"),\n    });\n  };\n\n  handleLeave = (): void => {\n    this.setState({ content: \"\" });\n  };\n\n  render() {\n    change();\n    range();\n    const popScale = scaleLinear()\n      .domain([min, (max + min) / 5, max])\n      .range([\"#A4DE02\", \"#76BA1B\", \"#1E5631\"]);\n\n    return (\n      <div style={wrapperStyles}>\n        {this.state.content && (\n          <div\n            style={{\n              position: \"fixed\",\n              top: this.state.origin.y + 20 - window.scrollY,\n              left: this.state.origin.x,\n              zIndex: 999999,\n              textAlign: \"center\",\n              border: \"1px grey solid\",\n              borderRadius: 3,\n              padding: 4,\n              backgroundColor: \"#fff\",\n            }}\n          >\n            {this.state.content}\n          </div>\n        )}\n\n        <ComposableMap\n          projectionConfig={{\n            scale: 205,\n            rotation: [-11, 0, 0],\n          }}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n          }}\n          width={900}\n        >\n          <ZoomableGroup center={[0, 20]}>\n            <Geographies geography={data}>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => {\n                  const country = mydata.find(\n                    s => s.name == geography.properties.name\n                  );\n                  return (\n                    <Geography\n                      key={geography.properties.ISO_A3 + i}\n                      geography={geography}\n                      onMouseMove={this.handleMove}\n                      onMouseLeave={this.handleLeave}\n                      projection={projection}\n                      style={{\n                        default: {\n                          fill: country ? popScale(calc(country)) : \"#e8f4f8\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                        hover: {\n                          fill: country\n                            ? popScale(calc(country) + 100)\n                            : \"#e8f4f8\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                        pressed: {\n                          fill: \"#263238\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                      }}\n                    />\n                  );\n                })\n              }\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    );\n  }\n}\n\nexport default ReactSimpleMap;\n"]},"metadata":{},"sourceType":"module"}