{"ast":null,"code":"import _classCallCheck from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/src/ReactSimpleMap/ReactSimpleMap.react.js\";\nimport * as React from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport data from \"./data/world-50m.json\";\nimport { scaleLinear } from \"d3-scale\";\n\nfunction value(p, k) {\n  if (k == 'end_date') {\n    return parseInt((p[k] - p['start_date']) / (1000 * 60 * 60 * 24)).toLocaleString(navigator.language, {\n      minimumFractionDigits: 0\n    });\n  } else if (k == 'start_date') {\n    console.log(p['country'] + (p['start_date'].getTime() == new Date().getTime()));\n\n    if (p['start_date'].getTime() == new Date().getTime()) {\n      console.log(\"inside if \");\n      return p['optimum_start'].getDate() + \"/\" + (p['optimum_start'].getMonth() + 1);\n    }\n\n    return p[k].getDate() + \"/\" + (p[k].getMonth() + 1);\n  } else if (k == 'Total_Saved') {\n    return ((p['end_date'] - p['start_date']) / (1000 * 60 * 60 * 24) * p['daily'] * 0.85 + (p['optimum_end'] - p['optimum_start']) / (1000 * 60 * 60 * 24) * p['daily'] * 0.4).toLocaleString(navigator.language, {\n      minimumFractionDigits: 0\n    });\n  } else if (k == 'daily') {\n    return p[k].toLocaleString(navigator.language, {\n      minimumFractionDigits: 0\n    });\n  } else if (k == 'optimum_start' || k == 'optimum_end') {\n    return \"\";\n  } else {\n    return p[k].toString();\n  }\n}\n\nvar max = 0;\nvar min = Number.MAX_VALUE;\nvar mydata = [{\n  country: \"China\",\n  daily: 5731496,\n  start_date: new Date(2020, 0, 20),\n  end_date: new Date(2020, 2, 20),\n  Total_Saved: 0,\n  optimum_start: new Date(2020, 2, 20),\n  optimum_end: new Date()\n}, {\n  country: \"India\",\n  daily: 1823594,\n  start_date: new Date(2020, 2, 22),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(),\n  optimum_end: new Date()\n}, {\n  country: \"USA\",\n  daily: 12898866,\n  start_date: new Date(),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(2020, 2, 20),\n  optimum_end: new Date()\n}, {\n  country: \"Japan\",\n  daily: 981746,\n  start_date: new Date(),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(2020, 2, 20),\n  optimum_end: new Date()\n}, {\n  country: \"Italy\",\n  daily: 309127 / 0.85,\n  start_date: new Date(2020, 2, 9),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(),\n  optimum_end: new Date()\n}, {\n  country: \"Spain\",\n  daily: 239046 / 0.85,\n  start_date: new Date(2020, 2, 14),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(),\n  optimum_end: new Date()\n}, {\n  country: \"France\",\n  daily: 333728 / 0.85,\n  start_date: new Date(2020, 2, 17),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(),\n  optimum_end: new Date()\n}, {\n  country: \"Germany\",\n  daily: 428368 / 0.85,\n  start_date: new Date(2020, 2, 22),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(),\n  optimum_end: new Date()\n}, {\n  country: \"UK\",\n  daily: 340751 / 0.85,\n  start_date: new Date(2020, 2, 23),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(),\n  optimum_end: new Date()\n}, {\n  country: \"Belgium\",\n  daily: 59255 / 0.85,\n  start_date: new Date(2020, 2, 18),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(),\n  optimum_end: new Date()\n}, {\n  country: \"Rest OF Europe\",\n  daily: 993706 / 0.4,\n  start_date: new Date(),\n  end_date: new Date(),\n  Total_Saved: 0,\n  optimum_start: new Date(2020, 2, 22),\n  optimum_end: new Date()\n}];\nvar wrapperStyles = {\n  width: \"100%\",\n  height: \"auto\",\n  maxWidth: \"100%\",\n  margin: \"0 auto\",\n  fontFamily: \"Roboto, sans-serif\"\n};\n\nfunction calc(p) {\n  return (p['end_date'] - p['start_date']) / (1000 * 60 * 60 * 24) * p['daily'] * 0.85 + (p['optimum_end'] - p['optimum_start']) / (1000 * 60 * 60 * 24) * p['daily'] * 0.4;\n} //const values = []\n\n\nfunction change() {\n  mydata.map(function (s) {\n    return s.Total_Saved = calc(s);\n  });\n}\n\nfunction range() {\n  mydata.forEach(function (o) {\n    min = Math.min(min, calc(o) == 0 ? Number.MAX_VALUE : calc(o));\n    max = Math.max(max, calc(o));\n  });\n  console.log(\"max\" + max);\n  console.log(\"min\" + min);\n}\n\nvar ReactSimpleMap =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ReactSimpleMap, _React$PureComponent);\n\n  function ReactSimpleMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReactSimpleMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReactSimpleMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      origin: {\n        x: 0,\n        y: 0\n      },\n      content: \"\"\n    };\n\n    _this.handleMove = function (geography, evt) {\n      var x = evt.clientX;\n      var y = evt.clientY + window.pageYOffset;\n      console.log(geography.properties.ISO_A3);\n\n      _this.setState({\n        origin: {\n          x: x,\n          y: y\n        },\n        content: geography.properties.name + \": \" + (mydata.find(function (s) {\n          return s.name == geography.properties.name;\n        }) ? calc(mydata.find(function (s) {\n          return s.country == geography.properties.name;\n        })) + \" MT\" : \"NA\")\n      });\n    };\n\n    _this.handleLeave = function () {\n      _this.setState({\n        content: \"\"\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ReactSimpleMap, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      change();\n      range();\n      var popScale = scaleLinear().domain([min, (max + min) / 5, max]).range([\"#A4DE02\", \"#76BA1B\", \"#1E5631\"]);\n      return React.createElement(\"div\", {\n        style: wrapperStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, this.state.content && React.createElement(\"div\", {\n        style: {\n          position: \"fixed\",\n          top: this.state.origin.y + 20 - window.scrollY,\n          left: this.state.origin.x,\n          zIndex: 999999,\n          textAlign: \"center\",\n          border: \"1px grey solid\",\n          borderRadius: 3,\n          padding: 4,\n          backgroundColor: \"#fff\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.state.content), React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 205,\n          rotation: [-11, 0, 0]\n        },\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        width: 900,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(ZoomableGroup, {\n        center: [0, 20],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geography: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          var country = mydata.find(function (s) {\n            return s.name == geography.properties.name;\n          });\n          return React.createElement(Geography, {\n            key: geography.properties.ISO_A3 + i,\n            geography: geography,\n            onMouseMove: _this2.handleMove,\n            onMouseLeave: _this2.handleLeave,\n            projection: projection,\n            style: {\n              default: {\n                fill: country ? popScale(calc(country)) : \"#e8f4f8\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: country ? popScale(calc(country) + 100) : \"#e8f4f8\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#263238\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          });\n        });\n      }))));\n    }\n  }]);\n\n  return ReactSimpleMap;\n}(React.PureComponent);\n\nexport default ReactSimpleMap;","map":{"version":3,"sources":["/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/src/ReactSimpleMap/ReactSimpleMap.react.js"],"names":["React","ComposableMap","ZoomableGroup","Geographies","Geography","data","scaleLinear","value","p","k","parseInt","toLocaleString","navigator","language","minimumFractionDigits","console","log","getTime","Date","getDate","getMonth","toString","max","min","Number","MAX_VALUE","mydata","country","daily","start_date","end_date","Total_Saved","optimum_start","optimum_end","wrapperStyles","width","height","maxWidth","margin","fontFamily","calc","change","map","s","range","forEach","o","Math","ReactSimpleMap","state","origin","x","y","content","handleMove","geography","evt","clientX","clientY","window","pageYOffset","properties","ISO_A3","setState","name","find","handleLeave","popScale","domain","position","top","scrollY","left","zIndex","textAlign","border","borderRadius","padding","backgroundColor","scale","rotation","geographies","projection","i","default","fill","stroke","strokeWidth","outline","hover","pressed","PureComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport data from \"./data/world-50m.json\";\nimport { scaleLinear } from \"d3-scale\";\n\nfunction value(p,k)\n  {\n   if (k == 'end_date')\n   {\n       return parseInt((p[k]-p['start_date'])/(1000*60*60*24)).toLocaleString(navigator.language, { minimumFractionDigits: 0 })\n   } \n   else if ( k == 'start_date')\n   {  console.log(p['country']+(p['start_date'].getTime()==(new Date().getTime())))\n       if ((p['start_date'].getTime()) == (new Date().getTime()))\n       {console.log(\"inside if \")\n         return p['optimum_start'].getDate()+\"/\"+(p['optimum_start'].getMonth()+1)}\n       \n       return p[k].getDate()+\"/\"+(p[k].getMonth()+1)\n   }\n   else if ( k == 'Total_Saved')\n   {\n       return ((((p['end_date']-p['start_date'])/(1000*60*60*24))*p['daily']*0.85)+(((p['optimum_end']-p['optimum_start'])/(1000*60*60*24))*p['daily']*0.4)).toLocaleString(navigator.language, { minimumFractionDigits: 0 })\n   }\n   else if (k == 'daily')\n   {\n     return (p[k]).toLocaleString(navigator.language, { minimumFractionDigits: 0 })\n   }\n   else if (k == 'optimum_start' || k == 'optimum_end')\n   {\n     return \"\"\n   }\n   else \n   {\n       return p[k].toString()\n   }\n  }\nvar max = 0;\nvar min = Number.MAX_VALUE;\nconst mydata = [\n  {country : \"China\", daily : 5731496, start_date : new Date(2020,0,20),end_date : new Date(2020,2,20),Total_Saved : 0,optimum_start:new Date(2020,2,20),optimum_end:new Date()},\n  {country : \"India\", daily : 1823594, start_date : new Date(2020,2,22),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n  {country : \"USA\", daily : 12898866, start_date : new Date(),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(2020,2,20),optimum_end:new Date()},\n  {country : \"Japan\", daily : 981746, start_date : new Date(),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(2020,2,20),optimum_end:new Date()},\n  {country : \"Italy\", daily : 309127/0.85, start_date : new Date(2020,2,9),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n  {country : \"Spain\", daily : 239046/0.85, start_date : new Date(2020,2,14),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n  {country : \"France\", daily : 333728/0.85, start_date : new Date(2020,2,17),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n  {country : \"Germany\", daily : 428368/0.85, start_date : new Date(2020,2,22),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n  {country : \"UK\", daily : 340751/0.85, start_date : new Date(2020,2,23),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n  {country : \"Belgium\", daily :59255/0.85, start_date : new Date(2020,2,18),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n  {country : \"Rest OF Europe\", daily : 993706/0.4, start_date : new Date(),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(2020,2,22),optimum_end:new Date()}\n]\nconst wrapperStyles = {\n  width: \"100%\",\n  height: \"auto\",\n  maxWidth: \"100%\",\n  margin: \"0 auto\",\n  fontFamily: \"Roboto, sans-serif\",\n};\n\ntype State = {\n  origin: { x: number, y: number },\n  content: string,\n};\n\nfunction calc(p) {\n  return (\n    ((((p['end_date']-p['start_date'])/(1000*60*60*24))*p['daily']*0.85)+(((p['optimum_end']-p['optimum_start'])/(1000*60*60*24))*p['daily']*0.4))\n\n  );\n}\n//const values = []\nfunction change() {\n  mydata.map(s => (s.Total_Saved = calc(s)));\n}\n\nfunction range() {\n  mydata.forEach(function(o) {\n    min = Math.min(min, calc(o) == 0 ? Number.MAX_VALUE : calc(o));\n    max = Math.max(max, calc(o));\n  });\n  console.log(\"max\" + max);\n  console.log(\"min\" + min);\n}\nclass ReactSimpleMap extends React.PureComponent<void, State> {\n  state = {\n    origin: { x: 0, y: 0 },\n    content: \"\",\n  };\n\n  handleMove = (\n    geography: { properties: { name: string, pop_est: string } },\n    evt: SyntheticMouseEvent<>\n  ): void => {\n    const x = evt.clientX;\n    const y = evt.clientY + window.pageYOffset;\n    console.log(geography.properties.ISO_A3);\n    this.setState({\n      origin: { x, y },\n      content:\n        geography.properties.name +\n        \": \" +\n        (mydata.find(s => s.name == geography.properties.name)\n          ? calc(mydata.find(s => s.country == geography.properties.name))+\" MT\"\n          : \"NA\"),\n    });\n  };\n\n  handleLeave = (): void => {\n    this.setState({ content: \"\" });\n  };\n\n  render() {\n    change();\n    range();\n    const popScale = scaleLinear()\n      .domain([min, (max + min) / 5, max])\n      .range([\"#A4DE02\", \"#76BA1B\", \"#1E5631\"]);\n\n    return (\n      <div style={wrapperStyles}>\n        {this.state.content && (\n          <div\n            style={{\n              position: \"fixed\",\n              top: this.state.origin.y + 20 - window.scrollY,\n              left: this.state.origin.x,\n              zIndex: 999999,\n              textAlign: \"center\",\n              border: \"1px grey solid\",\n              borderRadius: 3,\n              padding: 4,\n              backgroundColor: \"#fff\",\n            }}\n          >\n            {this.state.content}\n          </div>\n        )}\n\n        <ComposableMap\n          projectionConfig={{\n            scale: 205,\n            rotation: [-11, 0, 0],\n          }}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n          }}\n          width={900}\n        >\n          <ZoomableGroup center={[0, 20]}>\n            <Geographies geography={data}>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => {\n                  const country = mydata.find(\n                    s => s.name == geography.properties.name\n                  );\n                  return (\n                    <Geography\n                      key={geography.properties.ISO_A3 + i}\n                      geography={geography}\n                      onMouseMove={this.handleMove}\n                      onMouseLeave={this.handleLeave}\n                      projection={projection}\n                      style={{\n                        default: {\n                          fill: country ? popScale(calc(country)) : \"#e8f4f8\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                        hover: {\n                          fill: country\n                            ? popScale(calc(country) + 100)\n                            : \"#e8f4f8\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                        pressed: {\n                          fill: \"#263238\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                      }}\n                    />\n                  );\n                })\n              }\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    );\n  }\n}\n\nexport default ReactSimpleMap;\n"]},"metadata":{},"sourceType":"module"}