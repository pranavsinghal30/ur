{"ast":null,"code":"var _jsxFileName = \"/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/src/table.js\";\nimport * as React from \"react\";\nimport { Page, Avatar, Icon, Grid, Card, Text, Table, Alert, Progress, colors, Dropdown, Button, StampCard, StatsCard, ProgressCard, Badge } from \"tabler-react\";\n\nfunction value(p, k) {\n  if (k == 'end_date') {\n    return parseInt((p[k] - p['start_date']) / (1000 * 60 * 60 * 24)).toLocaleString(navigator.language, {\n      minimumFractionDigits: 0\n    });\n  } else if (k == 'start_date') {\n    if (p[k].getTime() == new Date().getTime()) {\n      return p['optimum_start'].getDate() + \"/\" + (p['optimum_start'].getMonth() + 1);\n    }\n\n    return p[k].getDate() + \"/\" + (p[k].getMonth() + 1);\n  } else if (k == 'Total_Saved') {\n    return ((p['end_date'] - p['start_date']) / (1000 * 60 * 60 * 24) * p['daily'] * 0.85 + (p['optimum_end'] - p['optimum_start']) / (1000 * 60 * 60 * 24) * p['daily'] * 0.4).toLocaleString(navigator.language, {\n      minimumFractionDigits: 0\n    });\n  } else if (k == 'daily') {\n    return p[k].toLocaleString(navigator.language, {\n      minimumFractionDigits: 0\n    });\n  } else if (k == 'optimum_start' || k == 'optimum_end') {\n    return \"\";\n  } else {\n    return p[k].toString();\n  }\n}\n\nvar style = {\n  textAlign: 'centre',\n  width: 100\n};\nexport default function table() {\n  var data = [{\n    country: \"China\",\n    daily: 5731496,\n    start_date: new Date(2020, 0, 20),\n    end_date: new Date(2020, 2, 20),\n    Total_Saved: 0,\n    optimum_start: new Date(2020, 2, 20),\n    optimum_end: new Date()\n  }, {\n    country: \"India\",\n    daily: 1823594,\n    start_date: new Date(2020, 2, 22),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(),\n    optimum_end: new Date()\n  }, {\n    country: \"USA\",\n    daily: 12898866,\n    start_date: new Date(),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(2020, 2, 20),\n    optimum_end: new Date()\n  }, {\n    country: \"Japan\",\n    daily: 981746,\n    start_date: new Date(),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(2020, 2, 20),\n    optimum_end: new Date()\n  }, {\n    country: \"Italy\",\n    daily: 309127 / 0.85,\n    start_date: new Date(2020, 2, 9),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(),\n    optimum_end: new Date()\n  }, {\n    country: \"Spain\",\n    daily: 239046 / 0.85,\n    start_date: new Date(2020, 2, 14),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(),\n    optimum_end: new Date()\n  }, {\n    country: \"France\",\n    daily: 333728 / 0.85,\n    start_date: new Date(2020, 2, 17),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(),\n    optimum_end: new Date()\n  }, {\n    country: \"Germany\",\n    daily: 428368 / 0.85,\n    start_date: new Date(2020, 2, 22),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(),\n    optimum_end: new Date()\n  }, {\n    country: \"UK\",\n    daily: 340751 / 0.85,\n    start_date: new Date(2020, 2, 23),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(),\n    optimum_end: new Date()\n  }, {\n    country: \"Belgium\",\n    daily: 59255 / 0.85,\n    start_date: new Date(2020, 2, 18),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(),\n    optimum_end: new Date()\n  }, {\n    country: \"Rest OF Europe\",\n    daily: 993706 / 0.4,\n    start_date: new Date(),\n    end_date: new Date(),\n    Total_Saved: 0,\n    optimum_start: new Date(2020, 2, 22),\n    optimum_end: new Date()\n  }];\n  return React.createElement(Table, {\n    responsive: true,\n    highlightRowOnHover: true,\n    hasOutline: true,\n    verticalAlign: \"center\",\n    cards: true,\n    className: \"text-nowrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Table.ColHeader, {\n    colSpan: 1,\n    alignContent: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Country\"), React.createElement(Table.ColHeader, {\n    alignContent: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Daily Saving MT of CO2\"), React.createElement(Table.ColHeader, {\n    alignContent: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Date of Lockdown\"), React.createElement(Table.ColHeader, {\n    alignContent: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Days Since Lockdown\"), React.createElement(Table.ColHeader, {\n    alignContent: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Total MT CO2 saved \"))), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, data.map(function (p) {\n    return React.createElement(Table.Row, {\n      key: p.country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, Object.keys(p).filter(function (k) {\n      return k !== 'optimum_start' || k !== 'optimum_end';\n    }).map(function (k) {\n      return React.createElement(Table.Col, {\n        key: p.country + '' + k,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        suppressContentEditableWarning: \"False\",\n        contentEditable: \"False\",\n        value: k,\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Text, {\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, value(p, k))));\n    }));\n  })));\n}","map":{"version":3,"sources":["/home/pranavagarwal/Downloads/dashboard-react/tabler-react/example/src/table.js"],"names":["React","Page","Avatar","Icon","Grid","Card","Text","Table","Alert","Progress","colors","Dropdown","Button","StampCard","StatsCard","ProgressCard","Badge","value","p","k","parseInt","toLocaleString","navigator","language","minimumFractionDigits","getTime","Date","getDate","getMonth","toString","style","textAlign","width","table","data","country","daily","start_date","end_date","Total_Saved","optimum_start","optimum_end","map","Object","keys","filter"],"mappings":"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","sourcesContent":["\n\nimport * as React from \"react\";\nimport {\n    Page,\n    Avatar,\n    Icon,\n    Grid,\n    Card,\n    Text,\n    Table,\n    Alert,\n    Progress,\n    colors,\n    Dropdown,\n    Button,\n    StampCard,\n    StatsCard,\n    ProgressCard,\n    Badge,\n  } from \"tabler-react\";\n  function value(p,k)\n  {\n   if (k == 'end_date')\n   {\n       return parseInt((p[k]-p['start_date'])/(1000*60*60*24)).toLocaleString(navigator.language, { minimumFractionDigits: 0 })\n   } \n   else if ( k == 'start_date')\n   {\n       if (p[k].getTime() == (new Date().getTime()))\n       {return p['optimum_start'].getDate()+\"/\"+(p['optimum_start'].getMonth()+1)}\n       \n       return p[k].getDate()+\"/\"+(p[k].getMonth()+1)\n   }\n   else if ( k == 'Total_Saved')\n   {\n       return ((((p['end_date']-p['start_date'])/(1000*60*60*24))*p['daily']*0.85)+(((p['optimum_end']-p['optimum_start'])/(1000*60*60*24))*p['daily']*0.4)).toLocaleString(navigator.language, { minimumFractionDigits: 0 })\n   }\n   else if (k == 'daily')\n   {\n     return (p[k]).toLocaleString(navigator.language, { minimumFractionDigits: 0 })\n   }\n   else if (k == 'optimum_start' || k == 'optimum_end')\n   {\n     return \"\"\n   }\n   else \n   {\n       return p[k].toString()\n   }\n  }\nconst style = \n{\n  textAlign : 'centre',\n  width : 100\n}\nexport default function table()\n{\n    const  data = [\n        {country : \"China\", daily : 5731496, start_date : new Date(2020,0,20),end_date : new Date(2020,2,20),Total_Saved : 0,optimum_start:new Date(2020,2,20),optimum_end:new Date()},\n        {country : \"India\", daily : 1823594, start_date : new Date(2020,2,22),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n        {country : \"USA\", daily : 12898866, start_date : new Date(),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(2020,2,20),optimum_end:new Date()},\n        {country : \"Japan\", daily : 981746, start_date : new Date(),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(2020,2,20),optimum_end:new Date()},\n        {country : \"Italy\", daily : 309127/0.85, start_date : new Date(2020,2,9),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n        {country : \"Spain\", daily : 239046/0.85, start_date : new Date(2020,2,14),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n        {country : \"France\", daily : 333728/0.85, start_date : new Date(2020,2,17),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n        {country : \"Germany\", daily : 428368/0.85, start_date : new Date(2020,2,22),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n        {country : \"UK\", daily : 340751/0.85, start_date : new Date(2020,2,23),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n        {country : \"Belgium\", daily :59255/0.85, start_date : new Date(2020,2,18),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(),optimum_end:new Date()},\n        {country : \"Rest OF Europe\", daily : 993706/0.4, start_date : new Date(),end_date : new Date(),Total_Saved : 0,optimum_start:new Date(2020,2,22),optimum_end:new Date()}\n      ]\n\n   return (\n   <Table\n   responsive\n   highlightRowOnHover\n   hasOutline\n   verticalAlign=\"center\"\n   cards\n   className=\"text-nowrap\"\n  >\n  \n    <Table.Header>\n      <Table.Row>\n        <Table.ColHeader colSpan={1} alignContent=\"left\">Country</Table.ColHeader>\n        <Table.ColHeader alignContent=\"left\">Daily Saving MT of CO2</Table.ColHeader>\n        <Table.ColHeader alignContent=\"left\">Date of Lockdown</Table.ColHeader>\n        <Table.ColHeader alignContent=\"left\">Days Since Lockdown</Table.ColHeader>\n        <Table.ColHeader alignContent=\"left\">Total MT CO2 saved </Table.ColHeader>\n        \n      </Table.Row>\n    </Table.Header>\n    <Table.Body>\n      {data.map(p =>\n       <Table.Row key={p.country}>\n           {Object.keys(p).filter(k => (k !== 'optimum_start'||k !=='optimum_end')).map(k => {\n               return (\n                   <Table.Col  key={p.country+''+k}>\n                       <div suppressContentEditableWarning=\"False\" contentEditable=\"False\" value={k}  style = {style}>{/*onInput={this.editColumn.bind(this,{p},{k})}*/}\n                       <Text size=\"sm\" >\n                       {value(p,k)}\n                      </Text></div>\n                       \n                   </Table.Col>\n               );\n           })}\n       </Table.Row>\n       )\n        }\n    </Table.Body>\n    </Table>\n   );\n}"]},"metadata":{},"sourceType":"module"}